// Code generated by capnpc-go. DO NOT EDIT.

package arith

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Arith capnp.Client

// Arith_TypeID is the unique identifier for the type Arith.
const Arith_TypeID = 0xf77c0d9e18b30d80

func (c Arith) Multiply(ctx context.Context, params func(Arith_multiply_Params) error) (Arith_multiply_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf77c0d9e18b30d80,
			MethodID:      0,
			InterfaceName: "arith/arith.capnp:Arith",
			MethodName:    "multiply",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Arith_multiply_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Arith_multiply_Results_Future{Future: ans.Future()}, release

}

func (c Arith) Divide(ctx context.Context, params func(Arith_divide_Params) error) (Arith_divide_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf77c0d9e18b30d80,
			MethodID:      1,
			InterfaceName: "arith/arith.capnp:Arith",
			MethodName:    "divide",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Arith_divide_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Arith_divide_Results_Future{Future: ans.Future()}, release

}

func (c Arith) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Arith) String() string {
	return "Arith(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Arith) AddRef() Arith {
	return Arith(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Arith) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Arith) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Arith) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Arith) DecodeFromPtr(p capnp.Ptr) Arith {
	return Arith(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Arith) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Arith) IsSame(other Arith) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Arith) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Arith) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Arith_Server is a Arith with a local implementation.
type Arith_Server interface {
	Multiply(context.Context, Arith_multiply) error

	Divide(context.Context, Arith_divide) error
}

// Arith_NewServer creates a new Server from an implementation of Arith_Server.
func Arith_NewServer(s Arith_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Arith_Methods(nil, s), s, c)
}

// Arith_ServerToClient creates a new Client from an implementation of Arith_Server.
// The caller is responsible for calling Release on the returned Client.
func Arith_ServerToClient(s Arith_Server) Arith {
	return Arith(capnp.NewClient(Arith_NewServer(s)))
}

// Arith_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Arith_Methods(methods []server.Method, s Arith_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf77c0d9e18b30d80,
			MethodID:      0,
			InterfaceName: "arith/arith.capnp:Arith",
			MethodName:    "multiply",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Multiply(ctx, Arith_multiply{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf77c0d9e18b30d80,
			MethodID:      1,
			InterfaceName: "arith/arith.capnp:Arith",
			MethodName:    "divide",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Divide(ctx, Arith_divide{call})
		},
	})

	return methods
}

// Arith_multiply holds the state for a server call to Arith.multiply.
// See server.Call for documentation.
type Arith_multiply struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Arith_multiply) Args() Arith_multiply_Params {
	return Arith_multiply_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Arith_multiply) AllocResults() (Arith_multiply_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Arith_multiply_Results(r), err
}

// Arith_divide holds the state for a server call to Arith.divide.
// See server.Call for documentation.
type Arith_divide struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Arith_divide) Args() Arith_divide_Params {
	return Arith_divide_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Arith_divide) AllocResults() (Arith_divide_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Arith_divide_Results(r), err
}

// Arith_List is a list of Arith.
type Arith_List = capnp.CapList[Arith]

// NewArith creates a new list of Arith.
func NewArith_List(s *capnp.Segment, sz int32) (Arith_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Arith](l), err
}

type Arith_multiply_Params capnp.Struct

// Arith_multiply_Params_TypeID is the unique identifier for the type Arith_multiply_Params.
const Arith_multiply_Params_TypeID = 0x937c04ee0557da9a

func NewArith_multiply_Params(s *capnp.Segment) (Arith_multiply_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Arith_multiply_Params(st), err
}

func NewRootArith_multiply_Params(s *capnp.Segment) (Arith_multiply_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Arith_multiply_Params(st), err
}

func ReadRootArith_multiply_Params(msg *capnp.Message) (Arith_multiply_Params, error) {
	root, err := msg.Root()
	return Arith_multiply_Params(root.Struct()), err
}

func (s Arith_multiply_Params) String() string {
	str, _ := text.Marshal(0x937c04ee0557da9a, capnp.Struct(s))
	return str
}

func (s Arith_multiply_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Arith_multiply_Params) DecodeFromPtr(p capnp.Ptr) Arith_multiply_Params {
	return Arith_multiply_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Arith_multiply_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Arith_multiply_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Arith_multiply_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Arith_multiply_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Arith_multiply_Params) A() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Arith_multiply_Params) SetA(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Arith_multiply_Params) B() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Arith_multiply_Params) SetB(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Arith_multiply_Params_List is a list of Arith_multiply_Params.
type Arith_multiply_Params_List = capnp.StructList[Arith_multiply_Params]

// NewArith_multiply_Params creates a new list of Arith_multiply_Params.
func NewArith_multiply_Params_List(s *capnp.Segment, sz int32) (Arith_multiply_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Arith_multiply_Params](l), err
}

// Arith_multiply_Params_Future is a wrapper for a Arith_multiply_Params promised by a client call.
type Arith_multiply_Params_Future struct{ *capnp.Future }

func (f Arith_multiply_Params_Future) Struct() (Arith_multiply_Params, error) {
	p, err := f.Future.Ptr()
	return Arith_multiply_Params(p.Struct()), err
}

type Arith_multiply_Results capnp.Struct

// Arith_multiply_Results_TypeID is the unique identifier for the type Arith_multiply_Results.
const Arith_multiply_Results_TypeID = 0xde53484dbde6376e

func NewArith_multiply_Results(s *capnp.Segment) (Arith_multiply_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Arith_multiply_Results(st), err
}

func NewRootArith_multiply_Results(s *capnp.Segment) (Arith_multiply_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Arith_multiply_Results(st), err
}

func ReadRootArith_multiply_Results(msg *capnp.Message) (Arith_multiply_Results, error) {
	root, err := msg.Root()
	return Arith_multiply_Results(root.Struct()), err
}

func (s Arith_multiply_Results) String() string {
	str, _ := text.Marshal(0xde53484dbde6376e, capnp.Struct(s))
	return str
}

func (s Arith_multiply_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Arith_multiply_Results) DecodeFromPtr(p capnp.Ptr) Arith_multiply_Results {
	return Arith_multiply_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Arith_multiply_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Arith_multiply_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Arith_multiply_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Arith_multiply_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Arith_multiply_Results) Product() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Arith_multiply_Results) SetProduct(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Arith_multiply_Results_List is a list of Arith_multiply_Results.
type Arith_multiply_Results_List = capnp.StructList[Arith_multiply_Results]

// NewArith_multiply_Results creates a new list of Arith_multiply_Results.
func NewArith_multiply_Results_List(s *capnp.Segment, sz int32) (Arith_multiply_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Arith_multiply_Results](l), err
}

// Arith_multiply_Results_Future is a wrapper for a Arith_multiply_Results promised by a client call.
type Arith_multiply_Results_Future struct{ *capnp.Future }

func (f Arith_multiply_Results_Future) Struct() (Arith_multiply_Results, error) {
	p, err := f.Future.Ptr()
	return Arith_multiply_Results(p.Struct()), err
}

type Arith_divide_Params capnp.Struct

// Arith_divide_Params_TypeID is the unique identifier for the type Arith_divide_Params.
const Arith_divide_Params_TypeID = 0x899d1df16a063b91

func NewArith_divide_Params(s *capnp.Segment) (Arith_divide_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Arith_divide_Params(st), err
}

func NewRootArith_divide_Params(s *capnp.Segment) (Arith_divide_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Arith_divide_Params(st), err
}

func ReadRootArith_divide_Params(msg *capnp.Message) (Arith_divide_Params, error) {
	root, err := msg.Root()
	return Arith_divide_Params(root.Struct()), err
}

func (s Arith_divide_Params) String() string {
	str, _ := text.Marshal(0x899d1df16a063b91, capnp.Struct(s))
	return str
}

func (s Arith_divide_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Arith_divide_Params) DecodeFromPtr(p capnp.Ptr) Arith_divide_Params {
	return Arith_divide_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Arith_divide_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Arith_divide_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Arith_divide_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Arith_divide_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Arith_divide_Params) Num() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Arith_divide_Params) SetNum(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Arith_divide_Params) Denom() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Arith_divide_Params) SetDenom(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Arith_divide_Params_List is a list of Arith_divide_Params.
type Arith_divide_Params_List = capnp.StructList[Arith_divide_Params]

// NewArith_divide_Params creates a new list of Arith_divide_Params.
func NewArith_divide_Params_List(s *capnp.Segment, sz int32) (Arith_divide_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Arith_divide_Params](l), err
}

// Arith_divide_Params_Future is a wrapper for a Arith_divide_Params promised by a client call.
type Arith_divide_Params_Future struct{ *capnp.Future }

func (f Arith_divide_Params_Future) Struct() (Arith_divide_Params, error) {
	p, err := f.Future.Ptr()
	return Arith_divide_Params(p.Struct()), err
}

type Arith_divide_Results capnp.Struct

// Arith_divide_Results_TypeID is the unique identifier for the type Arith_divide_Results.
const Arith_divide_Results_TypeID = 0xc3b2f98a3be2a268

func NewArith_divide_Results(s *capnp.Segment) (Arith_divide_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Arith_divide_Results(st), err
}

func NewRootArith_divide_Results(s *capnp.Segment) (Arith_divide_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Arith_divide_Results(st), err
}

func ReadRootArith_divide_Results(msg *capnp.Message) (Arith_divide_Results, error) {
	root, err := msg.Root()
	return Arith_divide_Results(root.Struct()), err
}

func (s Arith_divide_Results) String() string {
	str, _ := text.Marshal(0xc3b2f98a3be2a268, capnp.Struct(s))
	return str
}

func (s Arith_divide_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Arith_divide_Results) DecodeFromPtr(p capnp.Ptr) Arith_divide_Results {
	return Arith_divide_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Arith_divide_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Arith_divide_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Arith_divide_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Arith_divide_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Arith_divide_Results) Quo() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Arith_divide_Results) SetQuo(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Arith_divide_Results) Rem() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Arith_divide_Results) SetRem(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Arith_divide_Results_List is a list of Arith_divide_Results.
type Arith_divide_Results_List = capnp.StructList[Arith_divide_Results]

// NewArith_divide_Results creates a new list of Arith_divide_Results.
func NewArith_divide_Results_List(s *capnp.Segment, sz int32) (Arith_divide_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Arith_divide_Results](l), err
}

// Arith_divide_Results_Future is a wrapper for a Arith_divide_Results promised by a client call.
type Arith_divide_Results_Future struct{ *capnp.Future }

func (f Arith_divide_Results_Future) Struct() (Arith_divide_Results, error) {
	p, err := f.Future.Ptr()
	return Arith_divide_Results(p.Struct()), err
}

const schema_f454c62f08bc504b = "x\xda\x94\x92=h\xd4`\x1c\xc6\x9f\xe7\xff&\x97[" +
	"nx/\x1d\xba\x94\x83r\x82\x05\xed\x97\x82pE\xee" +
	",\x08R\x11\xf2V\xc19\xf6\x0e.r_\xa6\x89\"" +
	"Tt\x13\xdd\xc4MP\xd0\xddEW]\x14\xdc\x1c\x1c" +
	"\x1ct\x10tp\x14\x04A\x9c\"okb\xe8)\xe2" +
	"\x98\xf0\xe3\xf9\xfd\x9f\x97g\xb9\xc2\x8e\xb3Rk(\x88" +
	"i\xba\x95\xec\xceZ\xe5\xe2\xd7\xb9\xfb\xb7`f)\x80" +
	"\xe3\x01GR\xae\x12\xf4\xaf\xf1\x0a\x98\xdd{\x7f\xde\xfd" +
	"\xe2\xec\xdc-\x03\xef\xb8n\x81\x8f\xbb@\xff\xd1\xa7\xb5" +
	"\xdb?\x9e\xbc,\x03\xc7\xa5e\x81\x93b\x81\xd1\xb1\xcf" +
	"\xcf\xcf\x9c:\xfb\xc1\x02\xfc\x05<\x94\x0d\x0b<\x966" +
	"\x98\xdd\xa8=\x9d}P\xdb\xf9\x0e]W\xd9\xe9\xe0Y" +
	"u\xe9\xd5\xb9o\x00\xfd\xd7\xf2\xc2\x7f+\x1e\xe0\xbf\x91" +
	"\x9b\xfe\x01\xe5\xe1P\x16\xc6Q\xd2_\x0ac\x15%\xfd" +
	"\xc5\xadp2\x9a\xb4N\xd8_\x8b\xdd\xe8r\xd4\xed5" +
	"\x83F\x18\x87\xc3mSU\x0e\xe0\x10\xd0\x0b\xf3\x80i" +
	"*\x9ae\xa1&g\xec\x11\xfa\xf0*`\x0e*\x9a\xa3" +
	"Bo\x94\x0e\xe9B\xe8\x82\x8dno4.\xbe\x0a\x9b" +
	"\xb3\xdf6L\x07I4\x19\\m\x06\xbb:\x94}\xf5" +
	"?\xf9\xea\xbf}\x0c\xf3|^\x982\xfd\xad\xd7f\xbb" +
	"\xb7\x9d\x0e\x92\x7f\x17\x9b/\x15\xbb\x94\x8es\x81\x17\xf7" +
	"\xfe\xa7\xd6\xe6\x9e\x0d0N\xe1\xab\xad\xc3\xf6\xa4\x99\x11" +
	"^\x9f\xc4\xe3n\xba\x95LE\xca\xbeH\x04\xa4\xa9*" +
	"\x17(\xa6\xc4|\x11ze\x03\xa2\x17<\xb2\xd8!\xf3" +
	"9\xe9\xb9\x16Dk/\xcbO\x02\xd0a{\xef5:" +
	"\x0c\xc8\x9f\x01\x00\x00\xff\xff\xd7\x99\xa9\xb2"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f454c62f08bc504b,
		Nodes: []uint64{
			0x899d1df16a063b91,
			0x937c04ee0557da9a,
			0xc3b2f98a3be2a268,
			0xde53484dbde6376e,
			0xf77c0d9e18b30d80,
		},
		Compressed: true,
	})
}
